plugins {
	id 'java'
	id 'checkstyle'
	id 'jacoco'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.olive'
version = '0.0.1-SNAPSHOT'

ext {
	set("checkstyleVersion", "10.18.1")
	set("instancioVersion", "5.1.0")
	set("openapiVersion", "2.8.5")
	set("jacocoVersion", "0.8.12")
	set("awaitilityVersion", "4.2.2")
	set("resilience4jVersion", "2.3.0")
}

checkstyle {
	toolVersion = "${checkstyleVersion}"
	ignoreFailures = false
	showViolations = true
}

jacoco {
	toolVersion = "${jacocoVersion}"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openapiVersion}"
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
	testImplementation "org.instancio:instancio-junit:${instancioVersion}"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	testImplementation 'org.testcontainers:mongodb'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

def jacocoExclusions = [
		"**/web/ExceptionAdviserController.class",
		"**/web/ExceptionAdviserController.class",
		"**/infrastructure/aspect/LoggingAspect.class",
		"**/domain/exception/*",
		"**/App.class",
]

jacocoTestReport {
	dependsOn test

	reports {
		xml.required.set(true)
		html.required.set(true)
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExclusions)
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExclusions)
		}))
	}
	violationRules {
		rule {
			element = "BUNDLE"
			limit {
				minimum = 0.85 // Minimum 85% coverage
			}
		}
	}
}

check {
	dependsOn jacocoTestCoverageVerification
}

bootJar {
	mainClass.set('com.olive.datapipeline.App')
	archiveFileName.set('data-pipeline.jar')
}
